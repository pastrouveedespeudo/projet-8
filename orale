INTTRO, des code, CONCLU (rappel) FAIS DES PHRASES CORRECTE ET FR
prend le temps de réflchir faut pas dire truk ni faire des phrases de bb meme si tu dis euh 100 ans c mieux que ah oui ou truk le type est chaud pcque son dernier paragraphe est ouaaaaa


Faire l'intro

tout d'abord les pages html qui sont l'interface de la recherche à travers 2 pages navebarre et home.html. Elles contiennent toutes les deux une balise form qui est une partie qui contient des  éléments interactifs du document que l'on va envoyé vers un url a travers une methode post. On envoie donc des informations a notre serveur. Ces éléments sont un champs de saisie cad un input de type texte, ici céréactive par exemple. Et on va déclencher cet envoie d’information a notre serveur c'est a dire un ordianteur relié a internet qui a pour rôle donnée des donné qui lui sont demandé par l'input submit. 

Ensuite on a la fonction searching qui va traiter la recherche.
Par la fonction searching on utilise l'api de django. Si il y a un objet de  requete de type post non vide (définie par le if) alors on va récuperer dans des variables les informations suivante : cool, username et data[] sous forme de liste.
Ici on va uniquement se concentrer sur search.
Si la variable search n'est pas null alors on va recupérer l'utilisateur en connexion. S'il y a un utilisateur en connexion on va appeler la fonction contrôle data food() qui va renvoyé True ou false. Si elle renvoie False alors on redéfinie une variable initialement vide.
Ensuite on va appeler deux autres fonctions : title et image_food. Maintenant nous allons faire un bloc try et bloc execept. On fait appel au bloc de l'instruction try cad la methode better_nutri() et de renvoyer les informations contenu dans les variable image, tilte te a sur notre page html. L'erreur a laquelle on s'attend c'est qu'il n'y est pas d'aliment correspondant a notre recherche dans la database. Alors on renvoie un message d'erreur par l'instruction du bloc except.

Les fonctions associées ! Commencons par contrôle_data_food() Ici on va faire appel a l'orm de django qui est un enregistrement d'objet sta dire un modele. On va stocker dans une variable la recherche d'un objet qui prend en parametre le parametre de fonction username.
Ensuite dans une petit liste ma gueule on va récuperer  par le manager les objet qui contient les aliments de l'utilisateur. Pour chqaue objet on va vvérigier qu'il ne sont pas nul. S'il ne le sont pas alors on incrément une varible initialement égale a 0. Si notre variable incrémenter est > 6 on renvoie ce message et False sinon on renvoie ce message et True.

Image_food() encore une fois on se sert de l'orm de django qui est un enregistrement d'objet on parle alors de model. Ici on va récuperer un objets de l'enregistrement d'objets ou model qui contient pour parametre le parametre de notre fonction cad para. On récuperer  par le manager l'objet image de l'enregistrement d'objet de django cad model par la method contains qu iest un equivalent a une requete sql du genre select * from aliment where name_aliment LIKE %recherche% cad ce modele a pour but d'utiliser tous les enregistrement qui utilise ce qu'il y a entre les %%. Sinon on fractionne la chaine de caractere et on récupere par le manager l'objet image

title_food() est une fonction qui prend en parametre para. Par exemple ici c'est céréactive donc la recherche. On définit dans un premier temps un bloc try puis un autre bloc except. Nous l'avons fait par la recommandation des tests de pytest plus précisement. Ensuite a l'interieur du premier block try nous avons refait deux bloc de try et except, a l'interieur du premier bloc d'instruction nous faisons appel a l'orm django soit une liste d'objet enregistrer appelé model. Nous prenons l'objet de la liste do'bjet aliment et mettons en parametre le parametre de la fonction para soit la recherche. A partir de cet objet nous récupérons  par le manager l'objet name_aliment afin de pouvoir le retourner sur notre page html.




Afin de pouvoir afficher la recherche et 5 autres aliments nous faisons appel a better_nutri().
Par l'orm django nous récupérons par le manger un objet qui par la method get nous retourne le parametre de la recherche par le parametre de la fonction para. Cela est l'equivalent de select * from aliment where name_aliment = para en requete sql.


Dans une liste nous stockons le nom de l'aliment, sa catégorie son nutriscore son image et son id. Ensuite nous demandons au manager de filtrer par le methode filter les objets  du modele aliment par leur id de categorie et cela par ordre croissant de nutriscore. A noter que filter renvoie une liste.
Nous initialisons une liste vide et une variable de type int a 0 (count). Nous parcourons la variable contenant les objets du modele retourner par le manager s'appelant category. A chaque tour de boucle nous incrémentons de + 1 la variable count et des qu'elle est egale a 20 on casse la boucle. Mais tant qu'elle n'est pas égale a 20 on récupere les objects : nom,  categorie nutriscore ainsi que image du modele aliment sous forme de liste que nous ajoutons a la liste vide liste.
Ensuite, nous redifissons cette liste qui etait de 0 element a 20 elments (notons que c mtn une liste de liste) de 20 au 6 premiers elements grace a l'expression slice. Ensuite nous remplacons le premier element de la liste comme etant notre recherche daliment. A noter qu'au lieu de rempalcer  le 6 eme element de la liste par notre recherche (en position 0 la mtn dans la liste) car nous effacons potentiellement une valeur nutriscore de A au lieu de D (comme dans l'exemple de simulation oups)

Passons a l'inscription de l''utilisateur. Voici la page html qui sert d'interface a l'inscription. Parlons un peu des formulaires de la fonction userregisterform. Tout dabord nous faisons hérité notre class par la classe mère forms du module django.foms. Ensuite nous définissons des champs ici un charfield pour du text et un champ emiafield pour un champs d'email. Ensuite nous appelons la classe méta  ce sont les informations de notre classe, de notre formulaire. Ensuite nous définissons une fonction de nettoyage clean. Self.cleaned_data.get. En effet cela permet de lutter contre le piratage malveillant en convertissant le tout en chaine de caractere. Mais aussi de pouvoir renvoyer none a contrario de get[''] qui leve une exception. Ensuite nous levons des exceptions En cas de non email pareil par exmeple.

Ensuite nous avec créer un model foodaccount contenant 7 objets de 7 champs charfields. Nous avons donc vu le formulaire d'inscription ainsi que le model foodaccount.

Si le formulaire est valide alors on redéfini le mdp de l'utilisateur car django lui donne un mdp par défault et on le sauvegarde. De plus on créer un objet dans le model foodaccount cad l'objet name. Ensuite on se sert du système d'identification de django pour loggin l'utilisateur. Nous faisons ensuite une redirection vers la page principale.

Pour logout on se sert de la deconnexion de django.

La connexion voici la simulation d'une connexion d'un utilisateur. On peut voir qu'il rentre son username et son mdp. Il faut qu'il valide afin de pouvoir se connecter. Nous avonc donc une classe userloginform. Cette classe est pratiquement la meme que register_views(). En effet, on fait hérité  userloginform par la classe mere form, on défini 2 champs de charfield pour du texte. On ajoute un widget au mot de passe pour mettre des étoiles, afin de dissimuler la saisie de rentrée (voilà c ca qu'ils aiment pas trop). On néttoies les champs et s'ils ne sont pas vide alors on se sert du système d'authentification de django et on retourne tout cela. On recupere cela dans la variable form. S'il est valide alors on refais un nettoyyage, on authentifie l'user et on redirige l'utilisateur a la page d'accueil.





Voici maintenant le plus gros. La deuxieme recherche d'un aliment et l'utilisateur est inscrit et connecté. Tout dabord,  la recherche + les 5 autres aliments.

Nous devons parler des pages html. Afin de pouvoir sauvegarder un aliment l'utilisateur doit appuyer sur la carré a coter de sauvegarder. Ce carré est une checkbox qui quand on clique dessus active une fonction. Sur la page html il y a 6 checkboxs.

En cliquant sur la checkbox on active la liste pushlist() qui prend en parametre id_product, user, stock et is_save. id_product est l'id de la balise input sur laquelle on appuie (la checkbox). User est l'utilisateur en cours, stock est une balise qui contient un gabarit, le gabarit du message stock dépassé, initialement elle est vide donc ne saffiche pas. Enfin is_save est une div vide qui affichera le message suivant (simulation).
Ici on stock dans une variable a la valeur de l'id_product qui contient par un gabararit le nom de l'aliment, attention celle la est importante
le nom de id_product soit is_save.
Et on stock egalement dans une variable c l'user. On ajoute cela a des 3 différentes listes.
Enfin on récupéere la balise contenant le gabartis qui nous dis si le stoc kdaliment est dépassé ou non.
Ensuite dans deux block d'instruction if else, on execute ;
si  le message du stock est différent d'une valeur nul alors on efface is_ave et on lui attribut une balise image (croix rouge). Sinon on exccute le deuxieme block et on met une image de crox verte.
(bah alors on met plus de définition ? J'en peux pluuus) 

Ensuite, en cliquant sur la checkbox on active aussi une requete de type post en ajax. Cette requete va envoyer les parametres suivants : l'username et le dernier element de la liste contenant les nom_d'aliment. 

Si on récupere une requete d'objet de type post alors on essaie de prendre les valeurs suivantes, a noter que nous l'avons deja vu. Search variable, la requete post de la recherche (pour afficher le titre et l'image), la vairble username va récupere l'user en cours et validate va récuperer la liste contenant le nom du dernier aliments de la liste des produits.

Si validate et username ne sont pas nul alors :
on récupere l'utilisateur en cours, et on appel la fonction controle_data_user() si cette fonction renvoie True alors on appel verification_product_not_two(). Si cette derniere fonction renvoie True alors on peut stocker l'aliment avec insert_food()
Si  verification_product_not_two() renvoie false alors on affiche un message qui dis que l'utilisateur a trop daliment.

Controle data_food est une fonction qui prend en paramètre username. En effet on va se servir de se parametre afin de demander au manager de recueillir du modele foodAccount l'objet dont le parametre name par le parametre de la fonction et en créer une instance. Deca on va stocker dans une liste tous les autres attribut (qui sont les aliments de l'utilisateur). On définie a 0 une variable integer. On parcours la liste d'attribut d'aliments et s'il est différent d'une valeur vide alors on increment la variable number de + 1. SI la variable number a la fin est >= 6 aolrs on retourne false + un message sinon on retourn True + un message.
Grace a cette fonction on interdit l'ajout d'aliment dans la table foodAccount.

Verification product not two permet d'empecher l'utilisateur de mettre plusieurs fois le meme produit dans ses aliments.

Ici on définie deux parametres. Username et product. Username nous sert a demander au model foodAccountpar le manager l'objet correspondant au parametre name.
Ensuite on va faire un block d'instruction if ou l'on passe en revu tous les aliments de l'utilisateur. Si un deux est égale avec notre parametre product (soit l'aliment selectionné de l'utilisateur) on return false et on interdit donc la mise en table sinon on return True.

Enfin la derniere fonction est insert_food contenant deux parametres. L'username pour appeler l'objet du modele correspondant au parametre name et food_name. On va vérifier par instruction if chaque éléments. Si un des aliments est egale a une valeur vide alors on renome l'objet par le parametre food_name (la recherche de l'utilisateur) et on le sauvegarde sinon on passe a la suite et ainsi desuite.

Simu web

la fonction my_food(). On récupere l'utilisateur en cours. Et on fait deux bloc d'instruction try except. L'instruction except permet de demander a l'utilisateur a travers une page html de remplir ses aliments. 
Le block try permet de récupérer les aliments de l'utilisateur, et de récuperer les informations des aliments. Ensuite on return sur le template les informations nécéssaires.

Comment marche my_food_user ? On définie une fonction avec un parametre qui va nous servir a récuperer l'objet correspondant au modele. On fait une instance et on récupere les attibuts de l'objet.  Ensuite pour chaque attribut dans la liste on les insertdans une liste que l'on retourne

Maintenant displya_food() prend en parametre food_list.
On définie une liste vide. On définit deux block d'instruction sous try except. Pour le premier block on parcours la liste que l'on récupere (soit la liste des aliments de l'utilisateur) et on appel par le manager le modele aliment ou l'on récupere l'objet contenu dans la varible éphémere i. on récupere dans une liste les attrivuts suivant nom aliment, code, description, nutriscore image, marque et magasin. Cette liste est ensuite ajouter a la liste liste_ali. On oublie pas de redéfinir note liste a =[]
on retourne la liste.  


Description d'un produit. Afin de pouvoir effacer l'image puir de pouvoir mettre les 3 inputs on utilise la fonction choice. L'image est enfete un input image qui a l'appuie déclenche la fonction choice() la fonction choice prend en parametre im, qui est l'id de l'emplacement de l'image,
image qui est une balise vide
detail qui est aussi un balise vide,
remplacement qui est aussi une balise vide
nan qui est une balise vide 
gabarit qui est l'image de l'aliment

on va display l'image
on va remettre l'image a l'emplacement de l'image mais en plus petit, on va récuperer la balise detail vide pour lui mettre un input de type submit et faire cela 3 fois. 
On va mettre dans la balise nan une nouvelle valeur qui a lappuie activera une fonction nanrien()
pour la balise remplacement on va mettre un input de valeur remplacement et pour detail un input submit de valeur detail.

La fonction nanrien() prend en parametre im image detail remplacement et nan. Elle va remettre image, detail remplacement et nan a une valeur null et remettre im en display  ce qui va reafficher l'image.

 en cliquant sur l'input de type submit qui va envoyer les information au serveur par un form qui est un section d'un document qui contient des éléméents interactifs vers l'url de la fonction La fonction fodd_det() par la méthode post. Par une valuer booléene s'il existe une requete post alors on va récupérer le nom de la balise produit. On va appeler la fonction food_details qui prend en parmaetre la recherche. Puis par la fonction food_details on va faire appel a l'orm en stockant dans la variable url_nutri l'attribut nutriscore.,
on récupere le nom de l'aliment, le code, l'image et l'url de l'image nutriscore par le meme procédé. Ensuite on retourne tous ca au template.

Food détails permet de récupérer via le model aliment cad un enregistrement d'objet l'objet qui prend en pramaetre le parametre value de la fonction. Ici on demand cela par le parametre image. On fait appel a une instance que l'on stock dans une variable que l'on retourne.

Voici la fonction replacing(). En appuyant sur l'input remplacer cet aliment on déclenche un post vers la fonction replacing qui va le récupérer et récupéerer le nom de la balise de l'input. On la stock dans une vairable. SI la variable est non nul alors on récuperer l('utilisateur en cours.

On créer une liste de liste a double élements, liste, puis une autre liste element vide puis une variable int initialement a 0. que contient replace_it ? Replace it contient :
l'utilisateur vient d'appuyer sur un de ces aliments, il vient dappuyer sur remplacer et il clique sur remplacer. replace_it contient l'aliment d'origine et le substitut . Nous traitons alors la donnée en ajoutons a notre liste chaque lettre de l'aliment. Si on detecte une virgule alors on ajoute + 1 a c ce en effet on dit : pour la liste de l'elmeent 0 on ajoute les lettre s'il y a une virgule on ajoute 1 a c qui fait pour la liste de l'element1 on ajoute les lettre. Puis on join les elements de les élements de liste qui unifie la chaine de charactere. Puis on appel la fonction verification replacement.
Cette fonction va renvoyer une vlaeur booléen true pi false si true alors on appel la fonction data_replace sinon on retourn un message comme quoi l'utilisateur a deja le produit.

Si on recoit une requete post mais que replace_it est null alors on récupere l'input rem ou l'on affiche les aliment. Et si on ne récuperer pas de requete post alors onretourn l'utilisateur vers ces aliments. Par exemple l'utilisateur a deja l'aliment.,

Verification replacement ici on appel l'orm djanfo on fait une instance que l'on stock dans une variable avec le parametre username du parametre de la gfonction. On récupere cela et on stoc kles attribu aliment1 a 6 dans une liste. On parcours la liste et si un des attribut match avec le parametre product de la fonction alors on retourn false ca veut dire qu'il ad eja son aliment sinon true et on peut rempalcer et on retourn l'utilisateur vers ses aliment. Et on fait donc appel a data_replace. Ou meme procedé orl,  et on parcours chaque aliment par replace_it on a l'ancien et le nouveau produit. Si un des aliment match avec l'aliment d'origine on le remplace par le substitut et on le save.

ON EXPLIQUE EN GROS, ON EXPLIQUE LE CODE, ON EXPLIQUE LE RESULTAT, ON NE PERDS PAS LE MEC SINON C PAS DE LA COGNITION SOCIALE, ET APRES LE MEC TE DETESTE


La base de donnée. 
