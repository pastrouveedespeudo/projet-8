Faire l'intro

tout d'abord les pages html qui sont l'interface de la recherche à travers 2 pages navebarre et home.html. Elles contiennent toutes les deux une balise form qui est une partie qui contient des  éléments interactifs du document que l'on va envoyé vers un url a travers une methode post. On envoie donc des informations a notre serveur. Ces éléments sont un champs de saisie cad un input de type texte, ici céréactive par exemple. Et on va déclencher cet envoie d’information a notre serveur c'est a dire un ordianteur relié a internet qui a pour rôle donnée des donné qui lui sont demandé par l'input submit. 

Ensuite on a la fonction searching qui va traiter la recherche.
Par la fonction searching on utilise l'api de django. Si il y a un objet de  requete de type post non vide (définie par le if) alors on va récuperer dans des variables les informations suivante : cool, username et data[] sous forme de liste.
Ici on va uniquement se concentrer sur search.
Si la variable search n'est pas null alors on va recupérer l'utilisateur en connexion. S'il y a un utilisateur en connexion on va appeler la fonction contrôle data food() qui va renvoyé True ou false. Si elle renvoie False alors on redéfinie une variable initialement vide.
Ensuite on va appeler deux autres fonctions : title et image_food. Maintenant nous allons faire un bloc try et bloc execept. On fait appel au bloc de l'instruction try cad la methode better_nutri() et de renvoyer les informations contenu dans les variable image, tilte te a sur notre page html. L'erreur a laquelle on s'attend c'est qu'il n'y est pas d'aliment correspondant a notre recherche dans la database. Alors on renvoie un message d'erreur par l'instruction du bloc except.

Les fonctions associées ! Commencons par contrôle_data_food() Ici on va faire appel a l'orm de django qui est un enregistrement d'objet sta dire un modele. On va stocker dans une variable la recherche d'un objet qui prend en parametre le parametre de fonction username.
Ensuite dans une petit liste ma gueule on va récuperer  par le manager les objet qui contient les aliments de l'utilisateur. Pour chqaue objet on va vvérigier qu'il ne sont pas nul. S'il ne le sont pas alors on incrément une varible initialement égale a 0. Si notre variable incrémenter est > 6 on renvoie ce message et False sinon on renvoie ce message et True.

Image_food() encore une fois on se sert de l'orm de django qui est un enregistrement d'objet on parle alors de model. Ici on va récuperer un objets de l'enregistrement d'objets ou model qui contient pour parametre le parametre de notre fonction cad para. On récuperer  par le manager l'objet image de l'enregistrement d'objet de django cad model par la method contains qu iest un equivalent a une requete sql du genre select * from aliment where name_aliment LIKE %recherche% cad ce modele a pour but d'utiliser tous les enregistrement qui utilise ce qu'il y a entre les %%. Sinon on fractionne la chaine de caractere et on récupere par le manager l'objet image

title_food() est une fonction qui prend en parametre para. Par exemple ici c'est céréactive donc la recherche. On définit dans un premier temps un bloc try puis un autre bloc except. Nous l'avons fait par la recommandation des tests de pytest plus précisement. Ensuite a l'interieur du premier block try nous avons refait deux bloc de try et except, a l'interieur du premier bloc d'instruction nous faisons appel a l'orm django soit une liste d'objet enregistrer appelé model. Nous prenons l'objet de la liste do'bjet aliment et mettons en parametre le parametre de la fonction para soit la recherche. A partir de cet objet nous récupérons  par le manager l'objet name_aliment afin de pouvoir le retourner sur notre page html.




Afin de pouvoir afficher la recherche et 5 autres aliments nous faisons appel a better_nutri().
Par l'orm django nous récupérons par le manger un objet qui par la method get nous retourne le parametre de la recherche par le parametre de la fonction para. Cela est l'equivalent de select * from aliment where name_aliment = para en requete sql.


Dans une liste nous stockons le nom de l'aliment, sa catégorie son nutriscore son image et son id. Ensuite nous demandons au manager de filtrer par le methode filter les objets  du modele aliment par leur id de categorie et cela par ordre croissant de nutriscore. A noter que filter renvoie une liste.
Nous initialisons une liste vide et une variable de type int a 0 (count). Nous parcourons la variable contenant les objets du modele retourner par le manager s'appelant category. A chaque tour de boucle nous incrémentons de + 1 la variable count et des qu'elle est egale a 20 on casse la boucle. Mais tant qu'elle n'est pas égale a 20 on récupere les objects : nom,  categorie nutriscore ainsi que image du modele aliment sous forme de liste que nous ajoutons a la liste vide liste.
Ensuite, nous redifissons cette liste qui etait de 0 element a 20 elments (notons que c mtn une liste de liste) de 20 au 6 premiers elements grace a l'expression slide. Ensuite nous remplacons le premier element de la liste comme etant notre recherche daliment. A noter qu'au lieu de rempalcer  le 6 eme element de la liste par notre recherche (en position 0 la mtn dans la liste) car nous effacons potentiellement une valeur nutriscore de A au lieu de D (comme dans l'exemple de simulation oups)

Passons a l'inscription de l''utilisateur. Voici la page html qui sert d'interface a l'inscription. Parlons un peu des formulaires de la fonction userregisterform. Tout dabord nous faisons hérité notre class par la classe mère forms du module django.foms. Ensuite nous définissons des champs ici un charfield pour du text et un champ emiafield pour un champs d'email. Ensuite nous appelons la classe méta  ce sont les informations de notre classe, de notre formulaire. Ensuite nous définissons une fonction de nettoyage clean. Self.cleaned_data.get. En effet cela permet de lutter contre le piratage malveillant en convertissant le tout en chaine de caractere. Mais aussi de pouvoir renvoyer none a contrario de get[''] qui leve une exception. Ensuite nous levons des exceptions En cas de non email pareil par exmeple.

Ensuite nous avec créer un model foodaccount contenant 7 objets de 7 champs charfields. Nous avons donc vu le formulaire d'inscription ainsi que le model foodaccount.

Si le formulaire est valide alors on redéfini le mdp de l'utilisateur car django lui donne un mdp par défault et on le sauvegarde. De plus on créer un objet dans le model foodaccount cad l'objet name. Ensuite on se sert du système d'identification de django pour loggin l'utilisateur. Nous faisons ensuite une redirection vers la page principale.

Pour logout on se sert de la deconnexion de django.

La connexion
